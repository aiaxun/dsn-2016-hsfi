From 41964c84516baf80cbf41ad789c1b03f8b28d017 Mon Sep 17 00:00:00 2001
From: skyel <razvan.ghitulete@gmail.com>
Date: Tue, 18 Mar 2014 00:43:09 +0100
Subject: [PATCH 2/2] llvmlinux: allow for global scope inline asm

Signed-off-by: skyel <razvan.ghitulete@gmail.com>
---
 tools/lto/LTOModule.cpp | 27 ++++++++++++++++++++++++++-
 1 file changed, 26 insertions(+), 1 deletion(-)

diff --git a/tools/lto/LTOModule.cpp b/tools/lto/LTOModule.cpp
index d805f49..1eb3a32 100644
--- a/tools/lto/LTOModule.cpp
+++ b/tools/lto/LTOModule.cpp
@@ -22,6 +22,7 @@
 #include "llvm/MC/MCExpr.h"
 #include "llvm/MC/MCInst.h"
 #include "llvm/MC/MCParser/MCAsmParser.h"
+#include "llvm/MC/MCSection.h"
 #include "llvm/MC/MCStreamer.h"
 #include "llvm/MC/MCSubtargetInfo.h"
 #include "llvm/MC/MCSymbol.h"
@@ -644,10 +645,32 @@ LTOModule::addPotentialUndefinedSymbol(const GlobalValue *decl, bool isFunc) {
 }
 
 namespace {
+
+// Common infrastructure is allowed to assume the existence of a current
+// section. Since this streamer doesn't need one itself, we just provide
+// a dummy one.
+class DummySection : public MCSection {
+public:
+  DummySection() : MCSection(SV_ELF, SectionKind::getText()) {}
+
+  virtual void PrintSwitchToSection(const MCAsmInfo &MAI, raw_ostream &OS,
+                                    const MCExpr *Subsection) const {}
+
+  virtual std::string getLabelBeginName() const { return ""; }
+
+  virtual std::string getLabelEndName() const { return ""; }
+
+  virtual bool UseCodeAlign() const { return false; }
+
+  virtual bool isVirtualSection() const { return false; }
+};
+
   class RecordStreamer : public MCStreamer {
   public:
     enum State { NeverSeen, Global, Defined, DefinedGlobal, Used };
 
+    DummySection TheSection;
+
   private:
     StringMap<State> Symbols;
 
@@ -734,7 +757,9 @@ namespace {
     }
 
     RecordStreamer(MCContext &Context)
-        : MCStreamer(SK_RecordStreamer, Context) {}
+        : MCStreamer(SK_RecordStreamer, Context) {
+      SwitchSection(&TheSection);
+    }
 
     virtual void EmitInstruction(const MCInst &Inst) {
       // Scan for values.
-- 
1.8.3.1

